#ifndef __AXP192_DATA_H__
#define __AXP192_DATA_H__

typedef struct _search_table_t
{
	union {
		int voltage;
		int res;
		int value1;
	};
	union {
		int capacity;
		int temp;
		int volt_act;
		int value2;
	};
} search_table_t;

#ifdef ST
#undef ST
#endif
#define ST(value1, value2)	{{(value1)}, {(value2)}}

static inline void
search_table(search_table_t *table, int val,
		unsigned int *start, unsigned int *end)
{
	unsigned int index_s = *start, index_m, index_e = *end;

	if (val >= table[index_s].value1) {
		*start = *end = index_s;
		return;
	} else if (val <= table[index_e].value1) {
		*start = *end = index_e;
		return;
	}

	do {
		index_m = (index_s + index_e) / 2;

		if (index_m == index_s || index_m == index_e) {
			*start = index_s;
			*end = index_e;
			break;
		}

		if (val >= table[index_m].value1)
			index_e = index_m;
		else if (val < table[index_m].value1)
			index_s = index_m;
	} while(1);
}

static inline int
search_table_return(search_table_t *table, int val,
		unsigned int *start, unsigned int *end)
{
	int ret;

	search_table(table, val, start, end);

	if (*start == *end)
		return table[*end].value2;

	ret = (val - table[*end].value1) *
		(table[*start].value2 - table[*end].value2) /
		(table[*start].value1 - table[*end].value1) +
		table[*end].value2;

	return ret;
}

static search_table_t RT_table[] = {
	/* value1 from large to small*/
	ST(214300, -400),
	ST(160800, -350),
	ST(121900, -300),
	ST(93290, -250),
	ST(72080, -200),
	ST(56180, -150),
	ST(44150, -100),
	ST(34980, -50),
	ST(27910, 0),
	ST(22440, 50),
	ST(18160, 100),
	ST(14790, 150),
	ST(12130, 200),
	ST(10000, 250),
	ST(8293, 300),
	ST(6914, 350),
	ST(5795, 400),
	ST(4882, 450),
	ST(4132, 500),
	ST(3514, 550),
	ST(3002, 600),
	ST(2575, 650),
	ST(2218, 700),
	ST(1918, 750),
	ST(1665, 800),
	ST(1451, 850),
	ST(1269, 900),
	ST(1114, 950),
	ST(981, 1000),
	ST(867, 1050),
	ST(768, 1100),
	ST(683, 1150),
	ST(609, 1200),
	ST(545, 1250),
};

static search_table_t CV_discharge_table_l[] = {
	ST(4054, 100),
	ST(4046, 99),
	ST(4035, 98),
	ST(4023, 97),
	ST(4009, 96),
	ST(3997, 95),
	ST(3986, 94),
	ST(3976, 93),
	ST(3969, 92),
	ST(3958, 91),
	ST(3951, 90),
	ST(3939, 89),
	ST(3929, 88),
	ST(3920, 87),
	ST(3911, 86),
	ST(3906, 85),
	ST(3900, 84),
	ST(3890, 83),
	ST(3884, 82),
	ST(3875, 81),
	ST(3863, 80),
	ST(3854, 79),
	ST(3847, 78),
	ST(3839, 77),
	ST(3835, 76),
	ST(3828, 75),
	ST(3821, 74),
	ST(3814, 73),
	ST(3807, 72),
	ST(3795, 71),
	ST(3789, 70),
	ST(3781, 69),
	ST(3775, 68),
	ST(3769, 67),
	ST(3765, 66),
	ST(3760, 65),
	ST(3755, 64),
	ST(3749, 63),
	ST(3744, 62),
	ST(3738, 61),
	ST(3734, 60),
	ST(3725, 59),
	ST(3720, 58),
	ST(3714, 57),
	ST(3710, 56),
	ST(3707, 55),
	ST(3701, 54),
	ST(3698, 53),
	ST(3694, 52),
	ST(3693, 51),
	ST(3689, 50),
	ST(3687, 49),
	ST(3683, 48),
	ST(3680, 47),
	ST(3677, 46),
	ST(3674, 45),
	ST(3670, 44),
	ST(3668, 43),
	ST(3666, 42),
	ST(3665, 41),
	ST(3663, 40),
	ST(3661, 39),
	ST(3655, 38),
	ST(3653, 37),
	ST(3652, 36),
	ST(3649, 35),
	ST(3647, 34),
	ST(3646, 33),
	ST(3645, 32),
	ST(3642, 31),
	ST(3641, 30),
	ST(3637, 29),
	ST(3635, 28),
	ST(3633, 27),
	ST(3630, 26),
	ST(3626, 25),
	ST(3624, 24),
	ST(3623, 23),
	ST(3619, 22),
	ST(3614, 21),
	ST(3609, 20),
	ST(3603, 19),
	ST(3597, 18),
	ST(3587, 17),
	ST(3576, 16),
	ST(3567, 15),
	ST(3557, 14),
	ST(3549, 13),
	ST(3537, 12),
	ST(3525, 11),
	ST(3504, 10),
	ST(3490, 9),
	ST(3478, 8),
	ST(3461, 7),
	ST(3439, 6),
	ST(3422, 5),
	ST(3404, 4),
	ST(3380, 3),
	ST(3342, 0),
	ST(3291, 0),
	ST(3200, 0),
};
static search_table_t CV_discharge_table_m[] = {
	ST(4087, 100),
	ST(4070, 99),
	ST(4057, 98),
	ST(4046, 97),
	ST(4038, 96),
	ST(4028, 95),
	ST(4017, 94),
	ST(4001, 93),
	ST(3991, 92),
	ST(3983, 91),
	ST(3976, 90),
	ST(3968, 89),
	ST(3958, 88),
	ST(3952, 87),
	ST(3943, 86),
	ST(3930, 85),
	ST(3923, 84),
	ST(3914, 83),
	ST(3907, 82),
	ST(3905, 81),
	ST(3896, 80),
	ST(3888, 79),
	ST(3881, 78),
	ST(3873, 77),
	ST(3863, 76),
	ST(3854, 75),
	ST(3846, 74),
	ST(3839, 73),
	ST(3835, 72),
	ST(3829, 71),
	ST(3823, 70),
	ST(3815, 69),
	ST(3809, 68),
	ST(3800, 67),
	ST(3791, 66),
	ST(3785, 65),
	ST(3779, 64),
	ST(3774, 63),
	ST(3765, 62),
	ST(3765, 61),
	ST(3759, 60),
	ST(3755, 59),
	ST(3748, 58),
	ST(3744, 57),
	ST(3741, 56),
	ST(3736, 55),
	ST(3732, 54),
	ST(3724, 53),
	ST(3719, 52),
	ST(3714, 51),
	ST(3711, 50),
	ST(3709, 49),
	ST(3705, 48),
	ST(3702, 47),
	ST(3700, 46),
	ST(3698, 45),
	ST(3694, 44),
	ST(3694, 43),
	ST(3693, 42),
	ST(3692, 41),
	ST(3692, 40),
	ST(3689, 39),
	ST(3688, 38),
	ST(3687, 37),
	ST(3685, 36),
	ST(3682, 35),
	ST(3681, 34),
	ST(3679, 33),
	ST(3678, 32),
	ST(3675, 31),
	ST(3674, 30),
	ST(3672, 29),
	ST(3670, 28),
	ST(3667, 27),
	ST(3664, 26),
	ST(3659, 25),
	ST(3653, 24),
	ST(3649, 23),
	ST(3645, 22),
	ST(3639, 21),
	ST(3635, 20),
	ST(3627, 19),
	ST(3624, 18),
	ST(3617, 17),
	ST(3606, 16),
	ST(3598, 15),
	ST(3582, 14),
	ST(3570, 13),
	ST(3557, 12),
	ST(3547, 11),
	ST(3534, 10),
	ST(3514, 9),
	ST(3498, 8),
	ST(3483, 7),
	ST(3470, 6),
	ST(3452, 5),
	ST(3427, 4),
	ST(3402, 3),
	ST(3351, 0),
	ST(3291, 0),
	ST(3200, 0),
};
static search_table_t CV_discharge_table_s[] = {
	ST(4138, 100),
	ST(4125, 99),
	ST(4116, 98),
	ST(4103, 97),
	ST(4092, 96),
	ST(4076, 95),
	ST(4065, 94),
	ST(4054, 93),
	ST(4046, 92),
	ST(4038, 91),
	ST(4029, 90),
	ST(4020, 89),
	ST(4005, 88),
	ST(3996, 87),
	ST(3986, 86),
	ST(3978, 85),
	ST(3974, 84),
	ST(3967, 83),
	ST(3960, 82),
	ST(3952, 81),
	ST(3944, 80),
	ST(3931, 79),
	ST(3923, 78),
	ST(3917, 77),
	ST(3909, 76),
	ST(3905, 75),
	ST(3897, 74),
	ST(3889, 73),
	ST(3883, 72),
	ST(3875, 71),
	ST(3863, 70),
	ST(3856, 69),
	ST(3848, 68),
	ST(3843, 67),
	ST(3835, 66),
	ST(3833, 65),
	ST(3826, 64),
	ST(3819, 63),
	ST(3812, 62),
	ST(3806, 61),
	ST(3797, 60),
	ST(3789, 59),
	ST(3785, 58),
	ST(3778, 57),
	ST(3773, 56),
	ST(3768, 55),
	ST(3765, 54),
	ST(3764, 53),
	ST(3758, 52),
	ST(3756, 51),
	ST(3751, 50),
	ST(3747, 49),
	ST(3745, 48),
	ST(3742, 47),
	ST(3738, 46),
	ST(3735, 45),
	ST(3734, 44),
	ST(3730, 43),
	ST(3723, 42),
	ST(3723, 41),
	ST(3721, 40),
	ST(3719, 39),
	ST(3718, 38),
	ST(3715, 37),
	ST(3715, 36),
	ST(3714, 35),
	ST(3712, 34),
	ST(3711, 33),
	ST(3710, 32),
	ST(3709, 31),
	ST(3707, 30),
	ST(3704, 29),
	ST(3703, 28),
	ST(3700, 27),
	ST(3698, 26),
	ST(3694, 25),
	ST(3693, 24),
	ST(3690, 23),
	ST(3686, 22),
	ST(3680, 21),
	ST(3676, 20),
	ST(3669, 19),
	ST(3660, 18),
	ST(3648, 17),
	ST(3639, 16),
	ST(3630, 15),
	ST(3622, 14),
	ST(3609, 13),
	ST(3597, 12),
	ST(3578, 11),
	ST(3562, 10),
	ST(3549, 9),
	ST(3533, 8),
	ST(3513, 7),
	ST(3496, 6),
	ST(3481, 5),
	ST(3458, 4),
	ST(3416, 3),
	ST(3361, 2),
	ST(3291, 1),
	ST(3200, 0),
};


static search_table_t CV_charge_table_l[] = {
	ST(4161, 100),
	ST(4160, 99),
	ST(4154, 98),
	ST(4149, 97),
	ST(4143, 96),
	ST(4138, 95),
	ST(4134, 94),
	ST(4131, 93),
	ST(4126, 92),
	ST(4122, 91),
	ST(4119, 90),
	ST(4117, 89),
	ST(4116, 88),
	ST(4110, 87),
	ST(4101, 86),
	ST(4094, 85),
	ST(4085, 84),
	ST(4072, 83),
	ST(4064, 82),
	ST(4055, 81),
	ST(4046, 80),
	ST(4043, 79),
	ST(4037, 78),
	ST(4029, 77),
	ST(4021, 76),
	ST(4015, 75),
	ST(4002, 74),
	ST(3996, 73),
	ST(3988, 72),
	ST(3983, 71),
	ST(3977, 70),
	ST(3974, 69),
	ST(3969, 68),
	ST(3962, 67),
	ST(3957, 66),
	ST(3953, 65),
	ST(3947, 64),
	ST(3938, 63),
	ST(3931, 62),
	ST(3927, 61),
	ST(3921, 60),
	ST(3914, 59),
	ST(3910, 58),
	ST(3906, 57),
	ST(3902, 56),
	ST(3896, 55),
	ST(3890, 54),
	ST(3885, 53),
	ST(3880, 52),
	ST(3874, 51),
	ST(3864, 50),
	ST(3861, 49),
	ST(3856, 48),
	ST(3853, 47),
	ST(3850, 46),
	ST(3846, 45),
	ST(3844, 44),
	ST(3841, 43),
	ST(3839, 42),
	ST(3836, 41),
	ST(3835, 40),
	ST(3835, 39),
	ST(3834, 38),
	ST(3832, 37),
	ST(3832, 36),
	ST(3830, 35),
	ST(3829, 34),
	ST(3828, 33),
	ST(3826, 32),
	ST(3825, 31),
	ST(3823, 30),
	ST(3823, 29),
	ST(3822, 28),
	ST(3821, 27),
	ST(3820, 26),
	ST(3818, 25),
	ST(3817, 24),
	ST(3814, 23),
	ST(3811, 22),
	ST(3808, 21),
	ST(3803, 20),
	ST(3793, 19),
	ST(3787, 18),
	ST(3780, 17),
	ST(3774, 16),
	ST(3765, 15),
	ST(3760, 14),
	ST(3751, 13),
	ST(3742, 12),
	ST(3729, 11),
	ST(3715, 10),
	ST(3703, 9),
	ST(3694, 8),
	ST(3683, 7),
	ST(3670, 6),
	ST(3650, 5),
	ST(3636, 4),
	ST(3623, 3),
	ST(3603, 2),
	ST(3562, 1),
	ST(3500, 0),
};
static search_table_t CV_charge_table_m[] = {
	ST(4166, 100),
	ST(4165, 99),
	ST(4164, 98),
	ST(4161, 97),
	ST(4159, 96),
	ST(4155, 95),
	ST(4147, 94),
	ST(4142, 93),
	ST(4139, 92),
	ST(4134, 91),
	ST(4131, 90),
	ST(4128, 89),
	ST(4125, 88),
	ST(4120, 87),
	ST(4117, 86),
	ST(4116, 85),
	ST(4112, 84),
	ST(4105, 83),
	ST(4097, 82),
	ST(4089, 81),
	ST(4076, 80),
	ST(4068, 79),
	ST(4061, 78),
	ST(4053, 77),
	ST(4046, 76),
	ST(4042, 75),
	ST(4035, 74),
	ST(4029, 73),
	ST(4023, 72),
	ST(4016, 71),
	ST(4005, 70),
	ST(3999, 69),
	ST(3994, 68),
	ST(3987, 67),
	ST(3980, 66),
	ST(3976, 65),
	ST(3973, 64),
	ST(3968, 63),
	ST(3964, 62),
	ST(3957, 61),
	ST(3952, 60),
	ST(3946, 59),
	ST(3936, 58),
	ST(3931, 57),
	ST(3927, 56),
	ST(3922, 55),
	ST(3917, 54),
	ST(3912, 53),
	ST(3906, 52),
	ST(3906, 51),
	ST(3901, 50),
	ST(3897, 49),
	ST(3892, 48),
	ST(3888, 47),
	ST(3887, 46),
	ST(3883, 45),
	ST(3879, 44),
	ST(3876, 43),
	ST(3875, 42),
	ST(3872, 41),
	ST(3866, 40),
	ST(3863, 39),
	ST(3861, 38),
	ST(3858, 37),
	ST(3857, 36),
	ST(3855, 35),
	ST(3854, 34),
	ST(3853, 33),
	ST(3851, 32),
	ST(3850, 31),
	ST(3848, 30),
	ST(3847, 29),
	ST(3846, 28),
	ST(3844, 27),
	ST(3843, 26),
	ST(3841, 25),
	ST(3840, 24),
	ST(3839, 23),
	ST(3835, 22),
	ST(3835, 21),
	ST(3833, 20),
	ST(3828, 19),
	ST(3822, 18),
	ST(3817, 17),
	ST(3810, 16),
	ST(3801, 15),
	ST(3790, 14),
	ST(3781, 13),
	ST(3771, 12),
	ST(3765, 11),
	ST(3756, 10),
	ST(3745, 9),
	ST(3734, 8),
	ST(3715, 7),
	ST(3700, 6),
	ST(3686, 5),
	ST(3669, 4),
	ST(3648, 3),
	ST(3630, 2),
	ST(3604, 1),
	ST(3550, 0),
};
static search_table_t CV_charge_table_s[] = {
	ST(4187, 100),
	ST(4184, 99),
	ST(4173, 98),
	ST(4169, 97),
	ST(4169, 96),
	ST(4169, 95),
	ST(4169, 94),
	ST(4167, 93),
	ST(4166, 92),
	ST(4162, 91),
	ST(4160, 90),
	ST(4155, 89),
	ST(4152, 88),
	ST(4145, 87),
	ST(4141, 86),
	ST(4137, 85),
	ST(4133, 84),
	ST(4130, 83),
	ST(4126, 82),
	ST(4122, 81),
	ST(4117, 80),
	ST(4117, 79),
	ST(4115, 78),
	ST(4107, 77),
	ST(4098, 76),
	ST(4090, 75),
	ST(4078, 74),
	ST(4071, 73),
	ST(4064, 72),
	ST(4055, 71),
	ST(4049, 70),
	ST(4046, 69),
	ST(4040, 68),
	ST(4034, 67),
	ST(4028, 66),
	ST(4021, 65),
	ST(4015, 64),
	ST(4005, 63),
	ST(3998, 62),
	ST(3993, 61),
	ST(3987, 60),
	ST(3982, 59),
	ST(3976, 58),
	ST(3975, 57),
	ST(3968, 56),
	ST(3965, 55),
	ST(3958, 54),
	ST(3954, 53),
	ST(3950, 52),
	ST(3944, 51),
	ST(3936, 50),
	ST(3932, 49),
	ST(3928, 48),
	ST(3924, 47),
	ST(3920, 46),
	ST(3917, 45),
	ST(3913, 44),
	ST(3910, 43),
	ST(3908, 42),
	ST(3906, 41),
	ST(3905, 40),
	ST(3903, 39),
	ST(3902, 38),
	ST(3899, 37),
	ST(3897, 36),
	ST(3896, 35),
	ST(3894, 34),
	ST(3890, 33),
	ST(3889, 32),
	ST(3887, 31),
	ST(3886, 30),
	ST(3884, 29),
	ST(3883, 28),
	ST(3880, 27),
	ST(3878, 26),
	ST(3876, 25),
	ST(3875, 24),
	ST(3874, 23),
	ST(3869, 22),
	ST(3864, 21),
	ST(3861, 20),
	ST(3856, 19),
	ST(3852, 18),
	ST(3846, 17),
	ST(3840, 16),
	ST(3835, 15),
	ST(3828, 14),
	ST(3819, 13),
	ST(3810, 12),
	ST(3795, 11),
	ST(3785, 10),
	ST(3774, 9),
	ST(3765, 8),
	ST(3754, 7),
	ST(3737, 6),
	ST(3715, 5),
	ST(3698, 4),
	ST(3682, 3),
	ST(3664, 2),
	ST(3630, 1),
	ST(3600, 0),
};

static search_table_t volt_act_table[] = {
	ST(4200, 4112),
	ST(4180, 4010),
	ST(4176, 4000),
	ST(4168, 3916),
	ST(4062, 3802),
	ST(3974, 3710),
	ST(3868, 3606),
	ST(3786, 3518),
	ST(3300, 3000),
};

#endif
