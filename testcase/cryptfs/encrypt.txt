实现目标：
1.SD卡只能在自己的pad上使用；
2.新的SD卡插入pad时必须要选择加密，否则不允许在pad上使用。

加密原理：

对用户数据进行软件加密一般有两种方法：
对每个文件单独加密，这也是现在android很多加密应用常用的做法，缺点是效率低下；
对文件系统加密，这种方法安全性比较高，而且可以实现对用户透明加密。

要对使用加密文件系统，首先需要了解linux文件系统框架

linux 文件系统大体框架如下：

    system call interface

    VFS

    file system

    buffer cache

    device driver

    disk

根据这个框架，我们可以有两种方法实现文件系统的加密：

a. stacked filesystem encryption

这种方法就是把系统调用‘system call interface’劫持，然后先对数据进行加密，
再把加密过的数据传到虚拟文件系统层（VFS），数据流如下：

    system call interface

    encrypt

    VFS

    file system

    buffer cache

    device driver

    disk

但这种方法效率并不是很高，因为每次写文件都需要进行加密，每次读文件都需要解密。

b. block device encryption

和上面不同，这种方法在文件系统的下层操作，它存在于数据缓冲层buffer cache和硬件
设备之间：

    system call interface

    VFS

    file system

    buffer cache

    encrypt

    device driver

    disk

它充分利用了buffer cache的缓冲功能，也即并不是用户的所有读写都会立刻进行加密解
密，而是当数据真的需要写到设备上或者要从设备上读出来的时候，才会触发加密解密，
这极大减少了cpu的负载，所以效率很高。

所以，我们选择了第二种加密方案.

我们在内部使用的加密算法是SHA256,
引用百度百科：
SHA是一种数据加密算法，该算法经过加密专家多年来的发展和改进已日益完善，现在已
成为公认的最安全的散列算法之一，并被广泛使用。该算法的思想是接收一段明文，然后
以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入
码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也
称为信息摘要或信息认证代码）的过程。散列函数值可以说是对明文的一种“指纹”或是“
摘要”，所以对散列值的数字签名就可以视为对此明文的数字签名。

要在android中使用这个方案，
首先需要在android的磁盘管理服务vold中加入加密和解密的支持，并把接口导出；
然后在android MountService中加入用户控制逻辑，并最终通过socket接口与vold进行通
信，从而实现加密和解密的功能。


用户操作逻辑：

1. 用户插入SD卡
2. 使用本机独一无二的key尝试进行解密
3. 如果解密失败，弹出UI对话框让用户选择是否加密
        a. 如果选择YES，则对SD卡加密、格式化，然后加载SD卡
        b. 如果选择NO，则不加载SD卡
4. 如果解密成功，则直接按照android标准流程加载SD卡

